// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eleven-sh/hetzner-cloud-provider/service (interfaces: UserConfigValidator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	userconfig "github.com/eleven-sh/hetzner-cloud-provider/userconfig"
	gomock "github.com/golang/mock/gomock"
)

// UserConfigValidator is a mock of UserConfigValidator interface.
type UserConfigValidator struct {
	ctrl     *gomock.Controller
	recorder *UserConfigValidatorMockRecorder
}

// UserConfigValidatorMockRecorder is the mock recorder for UserConfigValidator.
type UserConfigValidatorMockRecorder struct {
	mock *UserConfigValidator
}

// NewUserConfigValidator creates a new mock instance.
func NewUserConfigValidator(ctrl *gomock.Controller) *UserConfigValidator {
	mock := &UserConfigValidator{ctrl: ctrl}
	mock.recorder = &UserConfigValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserConfigValidator) EXPECT() *UserConfigValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *UserConfigValidator) Validate(arg0 *userconfig.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *UserConfigValidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*UserConfigValidator)(nil).Validate), arg0)
}
